<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.10: http://docutils.sourceforge.net/" />
<title></title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7514 2012-09-14 14:27:12Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document">


<p><strong>(RTC 作成 1) 音声キーワードロガー RTC の開発</strong></p>
<div class="contents topic" id="contents">
<p class="topic-title first">Contents</p>
<ul class="auto-toc simple">
<li><a class="reference internal" href="#introduction" id="id14">1&nbsp;&nbsp;&nbsp;Introduction</a><ul class="auto-toc">
<li><a class="reference internal" href="#id1" id="id15">1.1&nbsp;&nbsp;&nbsp;このページで体験すること</a></li>
<li><a class="reference internal" href="#id2" id="id16">1.2&nbsp;&nbsp;&nbsp;関連するチュートリアル</a></li>
<li><a class="reference internal" href="#systemenvironment" id="id17">1.3&nbsp;&nbsp;&nbsp;SystemEnvironment</a></li>
</ul>
</li>
<li><a class="reference internal" href="#rtc-i-o-configuration" id="id18">2&nbsp;&nbsp;&nbsp;RTC の仕様 (I/O, Configuration)</a></li>
<li><a class="reference internal" href="#rtcbuilder" id="id19">3&nbsp;&nbsp;&nbsp;RTCBuilder のインストール，起動</a></li>
<li><a class="reference internal" href="#how-to-make-rtc" id="id20">4&nbsp;&nbsp;&nbsp;How to make RTC</a><ul class="auto-toc">
<li><a class="reference internal" href="#id3" id="id21">4.1&nbsp;&nbsp;&nbsp;新規プロジェクトの作成</a></li>
<li><a class="reference internal" href="#samplewordlogger" id="id22">4.2&nbsp;&nbsp;&nbsp;SampleWordLogger コンポーネントの雛型の生成</a><ul class="auto-toc">
<li><a class="reference internal" href="#id4" id="id23">4.2.1&nbsp;&nbsp;&nbsp;プロファイル情報入力とコードの生成</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id5" id="id24">4.3&nbsp;&nbsp;&nbsp;仮ビルド</a></li>
<li><a class="reference internal" href="#id6" id="id25">4.4&nbsp;&nbsp;&nbsp;ヘッダ，ソースの編集</a><ul class="auto-toc">
<li><a class="reference internal" href="#id7" id="id26">4.4.1&nbsp;&nbsp;&nbsp;アクティビティ処理の実装</a></li>
<li><a class="reference internal" href="#cpp" id="id27">4.4.2&nbsp;&nbsp;&nbsp;.cpp ファイル編集</a></li>
</ul>
</li>
<li><a class="reference internal" href="#cmakelist-txt" id="id28">4.5&nbsp;&nbsp;&nbsp;CMakeList.txt の編集</a></li>
<li><a class="reference internal" href="#vc" id="id29">4.6&nbsp;&nbsp;&nbsp;VC++ によるビルド</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id8" id="id30">5&nbsp;&nbsp;&nbsp;実行方法</a></li>
</ul>
</div>
<div class="section" id="introduction">
<h1><a class="toc-backref" href="#id14">1&nbsp;&nbsp;&nbsp;Introduction</a></h1>
<div class="section" id="id1">
<h2><a class="toc-backref" href="#id15">1.1&nbsp;&nbsp;&nbsp;このページで体験すること</a></h2>
<ul class="simple">
<li><cite>OpenHRI</cite> の RTC と接続することで，音声認識されたキーワードのログを取得し，時刻とともにファイルに保存する <cite>SampleWordLogger RTC</cite> の開発</li>
</ul>
</div>
<div class="section" id="id2">
<h2><a class="toc-backref" href="#id16">1.2&nbsp;&nbsp;&nbsp;関連するチュートリアル</a></h2>
<ul class="simple">
<li><cite>RTC</cite> 作成の一般的作業の詳細は SampleWordLogger コンポーネントのチュートリアル[<a class="reference external" href="http://www.openrtm.org/openrtm/ja/node/4625#toc7">1</a>]に記述があります．特に <cite>Eclipse</cite> 上での GUI を利用した開発が説明されています．
- なお本チュートリアル内で，[<a class="reference external" href="http://www.openrtm.org/openrtm/ja/node/4625#toc7">1</a>]内の多くの画像を参照しています．参照元はその都度記載しています．</li>
</ul>
</div>
<div class="section" id="systemenvironment">
<h2><a class="toc-backref" href="#id17">1.3&nbsp;&nbsp;&nbsp;SystemEnvironment</a></h2>
<ul class="simple">
<li>Windows 7 / 8</li>
<li>Visual C++ 2010 (English [<a class="reference external" href="http://www.visualstudio.com/downloads/download-visual-studio-vs#DownloadFamilies_4">3</a>], Japanese [<a class="reference external" href="http://go.microsoft.com/fwlink/?LinkId=190491&amp;clcid=0x411">4</a>])</li>
<li><cite>CMake</cite> 2.8 (インストーラが同梱されています ./misc/installer/cmake-2.8.8-win32-x86.exe)</li>
<li><cite>RTCBuilder</cite> 1.1 (bundled in Eclipse [<a class="reference external" href="http://openrtp.jp/wiki/attachments/_default/Home/iRex2011/eclipse342_rtmtools110-rc2_win32_ja.zip/download">5</a>])</li>
</ul>
</div>
</div>
<div class="section" id="rtc-i-o-configuration">
<h1><a class="toc-backref" href="#id18">2&nbsp;&nbsp;&nbsp;RTC の仕様 (I/O, Configuration)</a></h1>
<p>これから作成するコンポーネントを SampleWordLogger RTC と呼ぶことにします．</p>
<p>このコンポーネントは <cite>TimedString</cite> 型の入力ポート (<cite>InPort</cite>) を持ちます．今回はログをファイルへ出力するのみとし，<cite>RTC</cite> として出力ポート (<cite>OutPort</cite>) は持たないｋとにします．<cite>InPort</cite> 名を <cite>result</cite> とします．</p>
<p>ログファイルの場所は今回はハードコードします (お好みに変えて下さい)．</p>
<p>上から RTC の仕様を次のようにまとめます．</p>
<table border="1" class="docutils">
<colgroup>
<col width="44%" />
<col width="56%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">Component Name</th>
<th class="head">SampleWordLogger</th>
</tr>
</thead>
<tbody valign="top">
<tr><td colspan="2">InPort</td>
</tr>
<tr><td>Port Name</td>
<td>result</td>
</tr>
<tr><td>Data Type</td>
<td>TimedString</td>
</tr>
<tr><td colspan="2">OutPort</td>
</tr>
<tr><td>Port Name</td>
<td>(None)</td>
</tr>
<tr><td>Data Type</td>
<td>(None)</td>
</tr>
<tr><td colspan="2">Configuration</td>
</tr>
<tr><td>Parameter Name</td>
<td>(None)</td>
</tr>
<tr><td>Data Type</td>
<td>(None)</td>
</tr>
<tr><td>Values</td>
<td>(None)</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="rtcbuilder">
<h1><a class="toc-backref" href="#id19">3&nbsp;&nbsp;&nbsp;RTCBuilder のインストール，起動</a></h1>
<p>本章では <cite>Eclipse</cite> ベースのツール <cite>OpenRTP (Open RT Platform)</cite> に同梱される <cite>RTBuilder</cite> を利用するので，[<a class="reference external" href="http://openrtm.org/openrtm/ja/download/openrtp/openrtp-110-rc4-ja#toc1">2</a>]からダウンロード・インストールして下さい．</p>
<p>新規ワークスペースを指定して Eclipse を起動すると，以下のような Welcome ページが表示されます (<a class="reference external" href="http://www.openrtm.org/openrtm/sites/default/files/1028/fig1-1EclipseInit.png">画像引用元</a>)．</p>
<img alt="http://www.openrtm.org/openrtm/sites/default/files/1028/fig1-1EclipseInit.png" src="http://www.openrtm.org/openrtm/sites/default/files/1028/fig1-1EclipseInit.png" />
<p>Welcome ページはいまは必要ないので左上の「×」ボタンを押して閉じてください (<a class="reference external" href="http://www.openrtm.org/openrtm/sites/default/files/1028/fig2-2PerspectiveSwitch.png">画像引用元</a>)．</p>
<img alt="http://www.openrtm.org/openrtm/sites/default/files/1028/fig2-2PerspectiveSwitch.png" src="http://www.openrtm.org/openrtm/sites/default/files/1028/fig2-2PerspectiveSwitch.png" />
<p>右上の「Open Perspective」ボタンを押下し，プルダウンの「Other…」 ボタンを押下します(<a class="reference external" href="http://www.openrtm.org/openrtm/sites/default/files/208/fig2-3PerspectiveSelection.png">画像引用元</a>)．</p>
<img alt="http://www.openrtm.org/openrtm/sites/default/files/208/fig2-3PerspectiveSelection.png" src="http://www.openrtm.org/openrtm/sites/default/files/208/fig2-3PerspectiveSelection.png" />
<p><cite>RTC Builder</cite> を選択することで，RTCBuilder が起動します．</p>
</div>
<div class="section" id="how-to-make-rtc">
<h1><a class="toc-backref" href="#id20">4&nbsp;&nbsp;&nbsp;How to make RTC</a></h1>
<div class="section" id="id3">
<h2><a class="toc-backref" href="#id21">4.1&nbsp;&nbsp;&nbsp;新規プロジェクトの作成</a></h2>
<p>SampleWordLogger コンポーネントを作成するために，<cite>RTCBuilder</cite> で新規プロジェクトを 作成する必要が有ります．画面上部のメニューから[ファイル]－[新規]－ [プロジェクト]を選択します．</p>
<img alt="media/rtb_new_prj.png" src="media/rtb_new_prj.png" />
<p>表示された ｢新規プロジェクト｣ 画面において，｢その他｣－｢RTCビルダ｣ を選択し，｢次へ｣ をクリックします．｢プロジェクト名｣欄に作成するプロジェクト名 (ここでは SampleWordLogger) を入力して｢終了｣をクリックします．</p>
<img alt="media/rtb_new_prj_name.png" src="media/rtb_new_prj_name.png" />
<p>指定した名称のプロジェクトが生成され，パッケージエクスプローラ内に追加されます． 生成したプロジェクト内には，デフォルト値が設定された RTC プロファ イル XML(RTC.xml) が自動的に生成されるのがわかると思います．</p>
<img alt="media/rtb_wordlogger_created.png" src="media/rtb_wordlogger_created.png" />
<p><cite>RTC.xml</cite> が生成された時点で，このプロジェクトに関連付けられているワークスペースとして <cite>RTCBuilder</cite> のエディタが開くはずです．もし開かない場合は，ツールバーの｢Open New RtcBuilder Editor｣ボタンを押下するか，メニューバーの [file]-[Open New Builder Editor] を選択します．</p>
<img alt="media/rtb_button_open_rtbeditor.png" src="media/rtb_button_open_rtbeditor.png" />
<p>(<a class="reference external" href="http://www.openrtm.org/openrtm/sites/default/files/1028/fig2-10FileMenuOpenNewBuilder.png">画像引用元</a>)．</p>
<img alt="http://www.openrtm.org/openrtm/sites/default/files/1028/fig2-10FileMenuOpenNewBuilder.png" src="http://www.openrtm.org/openrtm/sites/default/files/1028/fig2-10FileMenuOpenNewBuilder.png" />
</div>
<div class="section" id="samplewordlogger">
<h2><a class="toc-backref" href="#id22">4.2&nbsp;&nbsp;&nbsp;SampleWordLogger コンポーネントの雛型の生成</a></h2>
<p>SampleWordLogger RTC の雛型の生成は，<cite>OpenRTP</cite> に同梱の <cite>RTCBuilder</cite> を用いて行います．</p>
<div class="section" id="id4">
<h3><a class="toc-backref" href="#id23">4.2.1&nbsp;&nbsp;&nbsp;プロファイル情報入力とコードの生成</a></h3>
<p>まず，いちばん左の「基本」タブを選択し，基本情報を入力します．先ほ ど決めた SampleWordLogger コンポーネントの仕様(名前)の他に，概要やバージョン等を入力してください．ラベルが赤字の項目は必須項目です．その他はデフォルトで構いません．</p>
<img alt="media/rtb_logger_componentinfo.png" src="media/rtb_logger_componentinfo.png" />
<p>次に，「アクティビティ」タブを選択し，使用するアクションコールバッ クを指定します．
<cite>SampleWordLogger RTC</cite> では，onActivated(), onDeactivated(), onExecute() コールバックを使用します．下図のように (1) の onAtivated をクリック後に (2) のラジオボタンにて &quot;on&quot; にチェックを入れます．onDeactivated, onExecute についても同様の手順を行います(<a class="reference external" href="http://www.openrtm.org/openrtm/sites/default/files/1431/Activity.png">画像引用元</a>)．</p>
<img alt="http://www.openrtm.org/openrtm/sites/default/files/1431/Activity.png" src="http://www.openrtm.org/openrtm/sites/default/files/1431/Activity.png" />
<p>さらに，&quot;Data Ports&quot; タブを選択し，データポートの情報を入力します． 先ほど決めた仕様を元に以下のように入力します．なお，変数名や表示位置はオプションで，そのままで結構です．</p>
<img alt="media/rtb_logger_dataport.png" src="media/rtb_logger_dataport.png" />
<p>次に，「言語・環境」タブを選択し，プログラミング言語を選択します． ここでは，<cite>C++</cite> を選択します．なお，言語・環境はデフォルト等が 設定されておらず，指定し忘れるとコード生成時にエラーになりますので， 必ず言語の指定を行うようにしてください．</p>
<p>また，<cite>C++</cite> の場合デフォルトでは <cite>CMake</cite> を利用してビルドすることになって いますが，旧式の <cite>VC</cite> のプロジェクトやソリューションを直接 <cite>RTCBuilder</cite> が 生成する方法を利用したい場合は <cite>Use old build environment</cite> を チェックしてください．</p>
<p>最後に，「基本」タブにある&quot;コード生成&quot;ボタンをクリックし，コンポー ネントの雛型を生成します．</p>
<p>※ 生成されるコード群は，eclipse 起動時に指定したワークスペースフォルダの中に生成されます．現在のワークスペースは，「ファイル(F)」 &gt; 「ワークスペースの切り替え(W)...」で確認することができます．</p>
</div>
</div>
<div class="section" id="id5">
<h2><a class="toc-backref" href="#id24">4.3&nbsp;&nbsp;&nbsp;仮ビルド</a></h2>
<p>さて，ここまでで SampleWordLogger コンポーネントのソースコードが生成されました． 処理の中身は実装されていないので，<cite>InPort</cite> に他の <cite>RTC</cite> を接続しても何も出力されませんが，生成直後のソースコードだけでもコンパイルおよび実行はできます．</p>
<p>※サービスポートとプロバイダを持つコンポーネントの場合，実装を行わないとビルドが通らないものもあります．</p>
<p>では，まず <cite>CMake</cite> を利用してビルド環境の <cite>Configure</cite> を行います．Linuxで あれば，SampleWordLogger コンポーネントのソースが生成されたディレクトリで:</p>
<pre class="literal-block">
$ cmake .
$ make
</pre>
<p>とすれば，Configureおよびビルドが完了するはずです．<cite>Windows</cite> の場合は GUI を利用して <cite>Configure</cite> してみます． スタートメニューなどから <cite>CMake (cmake-gui)</cite> を起動します(<a class="reference external" href="http://www.openrtm.org/openrtm/sites/default/files/4625/CMakeGUI0.png">画像引用元</a>)．</p>
<img alt="http://www.openrtm.org/openrtm/sites/default/files/4625/CMakeGUI0.png" src="http://www.openrtm.org/openrtm/sites/default/files/4625/CMakeGUI0.png" />
<p>画面上部に以下のようなテキストボックスがありますので，それぞれソースコードの場所(<cite>CMakeList.txt</cite> が有る場所) と，ビルドディレクトリを指定します．</p>
<blockquote>
Where is the soruce code ^ Where to build the binaries</blockquote>
<p>ソースコードの場所は SampleWordLogger コンポーネントのソースが生成された場所で <cite>CMakeList.txt</cite> が存在するディレクトリです．デフォルトでは &lt;ワークス ペースディレクトリ&gt;/SampleWordLogger になります．</p>
<p>また，ビルドディレクトリとは，ビルドするためのプロジェクトファイルやオブジェクトファイル，バイナリを格納する場所のことです．場所は任意ですが，この場合 &lt;ワークスペースディレクトリ&gt;/SampleWordLogger/build のように分かりやすい名前をつけた SampleWordLogger のサブディレクトリを指定することをお勧めします．</p>
<img alt="media/logger_cmake_1.png" src="media/logger_cmake_1.png" />
<p>指定したら，下の <cite>Configure</cite> ボタンを押します．すると下図のようなダイアログが表示されますので，生成したいプロジェクトの種類を指定します．今回は <cite>Visual Studio 10</cite> とします(<a class="reference external" href="http://www.openrtm.org/openrtm/sites/default/files/4625/CMakeGUI1.png">画像引用元</a>)．</p>
<img alt="http://www.openrtm.org/openrtm/sites/default/files/4625/CMakeGUI1.png" src="http://www.openrtm.org/openrtm/sites/default/files/4625/CMakeGUI1.png" />
<p>ダイアログで Finish を押すと Configure が始まります．問題がなければ下部のログウインドウに Configuring done と出力されますので，続けて Generate ボタンを押します．Generating done と出ればプロジェクトファイル・ソリューションファイル等の出力が完了します．</p>
<p>なお，<cite>CMake</cite> は Configure の段階でキャッシュファイルを生成しますので，トラブルなどで設定を変更したり環境を変更した場合は [File]-[Delete Cache] でキャッシュを削除して <cite>Configure</cite> からやり直してください．</p>
<p>次に先ほど指定した <cite>build</cite> ディレクトリの中の SampleWordLogger.sln をダブルクリックして <cite>Visual Studio 2010</cite> を起動します．</p>
<p>起動後，ソリューションエクスプローラーの <cite>ALL_BUILD</cite> を右クリックしビルドを選択してビルドします．特に問題がなければ正常にビルドが終了します．</p>
<img alt="media/vc_logger_built.png" src="media/vc_logger_built.png" />
<p>ここで <cite>VC++ 2010</cite> は閉じても構いません．</p>
</div>
<div class="section" id="id6">
<h2><a class="toc-backref" href="#id25">4.4&nbsp;&nbsp;&nbsp;ヘッダ，ソースの編集</a></h2>
<div class="section" id="id7">
<h3><a class="toc-backref" href="#id26">4.4.1&nbsp;&nbsp;&nbsp;アクティビティ処理の実装</a></h3>
<p>SampleWordLogger RTC では，InPort から語を受け取った時刻とその語をファイルストリームに流します．</p>
<p><cite>onActivated()</cite>, <cite>onExecute()</cite>, <cite>onDeactivated()</cite> での処理内容を下図に示します (<a class="reference external" href="https://docs.google.com/drawings/d/19KHmLRoOhHJVumNMwcO7CrPV7lWUwmFB3CD5OfT6mIo/edit">編集用の図ファイル</a> 必要であれば編集権を同ページ内から申請して下さい)．</p>
<img alt="https://docs.google.com/drawings/d/19KHmLRoOhHJVumNMwcO7CrPV7lWUwmFB3CD5OfT6mIo/pub?w=960&amp;amp;h=720" src="https://docs.google.com/drawings/d/19KHmLRoOhHJVumNMwcO7CrPV7lWUwmFB3CD5OfT6mIo/pub?w=960&amp;amp;h=720" />
</div>
<div class="section" id="cpp">
<h3><a class="toc-backref" href="#id27">4.4.2&nbsp;&nbsp;&nbsp;.cpp ファイル編集</a></h3>
<p>下記のように，<cite>onActivated()</cite>, <cite>onDeactivated()</cite>, <cite>onExecute()</cite> を実装します．:</p>
<pre class="literal-block">
RTC::ReturnCode_t SampleWordLogger::onActivated(RTC::UniqueId ec_id)
{
  // open file
  std::cerr &lt;&lt; &quot;Opening Log File ... &quot; &lt;&lt; m_SampleWordLoggerFileName &lt;&lt; std::endl;
  std::locale::global(std::locale(&quot;&quot;));
  m_SampleWordFileStream.open(m_SampleWordLoggerFileName);
  if(!m_SampleWordFileStream) {
      std::cerr&lt;&lt;&quot;Error opening file&quot;&lt;&lt; std::endl;
      return RTC::RTC_ERROR;
  }

  m_SampleWordFileStream.imbue(std::locale(m_SampleWordFileStream.getloc(),new std::codecvt_utf8_utf16&lt;wchar_t&gt;));

  return RTC::RTC_OK;
}

RTC::ReturnCode_t SampleWordLogger::onDeactivated(RTC::UniqueId ec_id)
{
  // close file
  m_SampleWordFileStream.close();

  return RTC::RTC_OK;
}

RTC::ReturnCode_t SampleWordLogger::onExecute(RTC::UniqueId ec_id)
{
   // Check if the inbound data is new.
   if (m_resultIn.isNew()) {
     // Read in from InPort.
     m_resultIn.read();

     //
     SYSTEMTIME systime;
     GetLocalTime(&amp;systime);
     static char sDate[128];
     sprintf(sDate, &quot;%04d/%02d/%02d %02d:%02d:%02d&quot;, systime.wYear, systime.wMonth, systime.wDay, systime.wHour, systime.wMinute, systime.wSecond);
     std::cerr &lt;&lt; &quot;Writing... &quot; &lt;&lt; std::endl;
     std::cerr &lt;&lt; &quot;    &quot; &lt;&lt; sDate &lt;&lt; std::endl;
     m_SampleWordFileStream &lt;&lt; sDate &lt;&lt; &quot; &quot;;

     HRESULT hr = S_OK;
     IXmlReader *pReader = NULL;
     XmlNodeType nodeType;
     IStream *pStream;
     CreateStreamOnHGlobal(NULL, TRUE, &amp;pStream);
     LARGE_INTEGER liBeggining = { 0 };
     pStream-&gt;Seek(liBeggining, STREAM_SEEK_SET, NULL);
     ULONG ulBytesWritten = 0;
     ULONG ulSize = 0;
     ULARGE_INTEGER uliSize = { 0 };
     pStream -&gt; SetSize (uliSize);
     ulSize = (ULONG)strlen(m_result.data);
     pStream-&gt;Write((void const*)m_result.data,(ULONG)ulSize, (ULONG*)&amp;ulBytesWritten);
     pStream-&gt;Seek(liBeggining, STREAM_SEEK_SET, NULL);

     if (FAILED(hr = CreateXmlReader(__uuidof(IXmlReader), (void**) &amp;pReader, NULL)))
     {
        wprintf(L&quot;Error creating xml reader, error is %08.8lx&quot;, hr);
            return RTC::RTC_ERROR;
     }

     if (FAILED(hr = pReader-&gt;SetProperty(XmlReaderProperty_DtdProcessing, DtdProcessing_Prohibit)))
     {
        wprintf(L&quot;Error setting XmlReaderProperty_DtdProcessing, error is %08.8lx&quot;, hr);
            return RTC::RTC_ERROR;
     }

     if (FAILED(hr = pReader-&gt;SetInput(pStream)))
     {
        wprintf(L&quot;Error setting input for reader, error is %08.8lx&quot;, hr);
        return RTC::RTC_ERROR;
     }


     bool firstText = true;
     while (S_OK == (hr = pReader-&gt;Read(&amp;nodeType)))
     {
        LPCWSTR pwszPrefix = NULL;
        UINT cwchPrefix = 0;
        LPCWSTR pwszLocalName = NULL;
        LPCWSTR pwszValue = NULL;

            switch (nodeType)
            {
            case XmlNodeType_Element:
                    if (FAILED(hr = pReader-&gt;GetPrefix(&amp;pwszPrefix, &amp;cwchPrefix)))
                    {
                            wprintf(L&quot;Error getting prefix, error is %08.8lx&quot;, hr);
                            return RTC::RTC_ERROR;
                    }
                    if (FAILED(hr = pReader-&gt;GetLocalName(&amp;pwszLocalName, NULL)))
                    {
                             wprintf(L&quot;Error getting local name, error is %08.8lx&quot;, hr);
                             return RTC::RTC_ERROR;
                }
                    if (cwchPrefix &gt; 0)
                            wprintf(L&quot;Element: %s:%s\n&quot;, pwszPrefix, pwszLocalName);
                    else
                            wprintf(L&quot;Element: %s\n&quot;, pwszLocalName);

                    // Attributes
                    const WCHAR* pwszPrefix;
                    const WCHAR* pwszLocalName;
                    const WCHAR* pwszValue;
                    hr = pReader-&gt;MoveToFirstAttribute();
                    while (TRUE)
                    {
                            if (!pReader-&gt;IsDefault())
                            {
                                    UINT cwchPrefix;
                                    if (FAILED(hr = pReader-&gt;GetPrefix(&amp;pwszPrefix, &amp;cwchPrefix)))
                                    {
                                            wprintf(L&quot;Error getting prefix, error is %08.8lx&quot;, hr);
                                            return RTC::RTC_ERROR;
                                    }
                                    if (FAILED(hr = pReader-&gt;GetLocalName(&amp;pwszLocalName, NULL)))
                                    {
                                            wprintf(L&quot;Error getting local name, error is %08.8lx&quot;, hr);
                                            return RTC::RTC_ERROR;
                                    }
                                    if (FAILED(hr = pReader-&gt;GetValue(&amp;pwszValue, NULL)))
                                    {
                                            wprintf(L&quot;Error getting value, error is %08.8lx&quot;, hr);
                                            return RTC::RTC_ERROR;
                                    }
                                    if (cwchPrefix &gt; 0)
                                            wprintf(L&quot;Attr: %s:%s=\&quot;%s\&quot; \n&quot;, pwszPrefix, pwszLocalName, pwszValue);
                                    else
                                            wprintf(L&quot;Attr: %s=\&quot;%s\&quot; \n&quot;, pwszLocalName, pwszValue);

                                    if ( firstText &amp;&amp; wcscmp(pwszLocalName, L&quot;text&quot;) == 0 ) {
                                            m_SampleWordFileStream &lt;&lt; pwszValue &lt;&lt; std::endl;
                                            firstText = false;
                                    }
                                    //m_SampleWordFileStream &lt;&lt; &quot;  &quot; &lt;&lt;  pwszLocalName &lt;&lt; &quot;:&quot; &lt;&lt; pwszValue &lt;&lt; std::endl;
                            }

                            if (S_OK != pReader-&gt;MoveToNextAttribute())
                                    break;
                    }

                    if (pReader-&gt;IsEmptyElement() )
                            wprintf(L&quot; (empty)&quot;);
                     break;
             case XmlNodeType_EndElement:
                     if (FAILED(hr = pReader-&gt;GetPrefix(&amp;pwszPrefix, &amp;cwchPrefix)))
                     {
                            wprintf(L&quot;Error getting prefix, error is %08.8lx&quot;, hr);
                            return RTC::RTC_ERROR;
                 }
                     if (FAILED(hr = pReader-&gt;GetLocalName(&amp;pwszLocalName, NULL)))
                     {
                            wprintf(L&quot;Error getting local name, error is %08.8lx&quot;, hr);
                            return RTC::RTC_ERROR;
                     }
                     if (cwchPrefix &gt; 0)
                            wprintf(L&quot;End Element: %s:%s\n&quot;, pwszPrefix, pwszLocalName);
                     else
                            wprintf(L&quot;End Element: %s\n&quot;, pwszLocalName);
                     break;
            }
     }
    //
   }
   return RTC::RTC_OK;
}
</pre>
</div>
</div>
<div class="section" id="cmakelist-txt">
<h2><a class="toc-backref" href="#id28">4.5&nbsp;&nbsp;&nbsp;CMakeList.txt の編集</a></h2>
<p>この RTC ではログファイル生成のために <cite>xmllib</cite> を使用しています (実際のログのフォーマットは xml ではありませんが) ので，<cite>RTCBuilder</cite> が生成した <cite>CMakeLists.txt</cite> にその旨を追記します．</p>
<p>適当なエディタ (<cite>VC++ 2010, Emacs</cite> 等) 上で，<cite>SampleWordLogger/CMakeLists.txt</cite> を開いて下さい．:</p>
<pre class="literal-block">
add_subdirectory(src)
</pre>
<p>とあり，<cite>src</cite> フォルダの情報は移譲されていることが分かるので，<cite>SampleWordLogger/src/CMakeLists.txt</cite> を開きます．このファイル中を例えば以下の様に変更します:</p>
<pre class="literal-block">
+ # Add xmllibs that's necessary for this SampleWordLogger project
+ set(REQ_LIBS xmllite.dll)

  add_library(${PROJECT_NAME} ${LIB_TYPE} ${comp_srcs}
    ${comp_headers} ${ALL_IDL_SRCS})
  set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX &quot;&quot;)
  set_source_files_properties(${ALL_IDL_SRCS} PROPERTIES GENERATED 1)
  add_dependencies(${PROJECT_NAME} ALL_IDL_TGT)
- target_link_libraries(${PROJECT_NAME} ${OPENRTM_LIBRARIES})
+ target_link_libraries(${PROJECT_NAME} ${OPENRTM_LIBRARIES} ${REQ_LIBS})

  add_executable(${PROJECT_NAME}Comp ${standalone_srcs}
    ${comp_srcs} ${comp_headers} ${ALL_IDL_SRCS})
- target_link_libraries(${PROJECT_NAME}Comp ${OPENRTM_LIBRARIES})
+ target_link_libraries(${PROJECT_NAME}Comp ${OPENRTM_LIBRARIES} ${REQ_LIBS})
</pre>
</div>
<div class="section" id="vc">
<h2><a class="toc-backref" href="#id29">4.6&nbsp;&nbsp;&nbsp;VC++ によるビルド</a></h2>
<p>Visual C++ 2010 に戻ります．もし既に閉じていれば，再度 <cite>SampleWordLogger.sln</cite> ファイルをダブルクリックし，Visual C++ 2010 を起動します．Visual C++ 2010 の起動後，下図のようにし，コンポーネントのビルドを行います(<a class="reference external" href="http://www.openrtm.org/openrtm/sites/default/files/1028/VC++_build.png">画像引用元</a>)．</p>
<img alt="http://www.openrtm.org/openrtm/sites/default/files/1028/VC++_build.png" src="http://www.openrtm.org/openrtm/sites/default/files/1028/VC++_build.png" />
<p>Visual C++ 2010 のコンソールにエラーが起きたと表示されなければ，以上で RTC 作成が終了です．</p>
</div>
</div>
<div class="section" id="id8">
<h1><a class="toc-backref" href="#id30">5&nbsp;&nbsp;&nbsp;実行方法</a></h1>
<p>以下，特に指定ない限り，配布 USB のホームディレクトリに居ることを前提とします．</p>
<p>では実行してみましょう．
<cite>SampleWordLogger</cite> は単体だと何も行わないので，先に紹介された <cite>MotionByVoiceDemo</cite> と組合せて発話を記録してみましょう．</p>
<p>上記二つのフォルダからそれぞれに格納される RTC を呼ぶための .bat ファイルを既に <cite>./demo/MotionByVoiceLoggerDemo</cite> として用意してあります．</p>
<ol class="arabic simple">
<li><cite>./demo/MotionByVoiceLoggerDemo</cite> から &quot;0 <a class="reference external" href="../demo/MotionByVoiceLoggerDemo/0%20StartDemo.bat">StartDemo.bat</a>&quot;，&quot;1 <a class="reference external" href="../demo/MotionByVoiceLoggerDemo/1%20ConnectRTC.bat">ConnectRTC.bat</a>&quot;，&quot;2 <a class="reference external" href="../demo/MotionByVoiceLoggerDemo/2%20ActivateRTC.bat">ActivateRTC.bat</a>&quot; をそれぞれ実行．RT System Editor で見てみると，<cite>SampleWordLogger</cite> の RTC も実行されているのが確認可能．</li>
</ol>
<img alt="media/rtse_motionvoicelogger_activated.png" src="media/rtse_motionvoicelogger_activated.png" />
<ol class="arabic" start="2">
<li><p class="first"><a class="reference external" href="1.4_callmotion_byvoice.htm#HowToRun">MotionByVoiceDemo のチュートリアル</a> に従い，発話デモを実行．</p>
</li>
<li><p class="first">3 から 5 までの <cite>.bat</cite> ファイルを実行し，RT システムを停止する．</p>
</li>
<li><p class="first"><cite>./demo/SampleWordLogger/build/Debug/SampleWord.log</cite> をテキストエディタで開くと，下の例のように，時刻と発話内容が記録されている．</p>
<blockquote>
<p>2014/03/13 08:56:31 左 さげて
2014/03/13 08:56:44 右 あげて
2014/03/13 08:57:08 左 よろしく
2014/03/13 08:58:23 左 あげて
2014/03/13 08:58:39 左 あげない</p>
</blockquote>
</li>
</ol>
<ol class="arabic simple" start="6">
<li>終了時は，&quot;3 <a class="reference external" href="../demo/MotionByVoiceLoggerDemo/3%20DeactivateRTC.bat">DeactivateRTC.bat</a>&quot;, &quot;4 <a class="reference external" href="../demo/MotionByVoiceLoggerDemo/4%20DisconnectRTC.bat">DisconnectRTC.bat</a>&quot;，&quot;5 <a class="reference external" href="../demo/MotionByVoiceLoggerDemo/5%20DemoExit.bat">DemoExit.bat</a>&quot; の順に実行．</li>
</ol>
<hr class="docutils" />
<p>Go back to <a class="reference external" href="index.htm">index</a> | Go to <a class="reference external" href="2.2_samplemotionselector.htm">next</a></p>
</div>
</div>
</body>
</html>
